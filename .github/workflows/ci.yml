name: Continuous Integration
on:
  push:
    branches-ignore:
      - master
  pull_request:
    branches:
      - master
jobs:
  setup:
    name: Setup CI
    if: github.event_name == 'pull_request' || github.ref != 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 16
          cache: gradle
      - name: Make Gradlew executable
        run: chmod +x gradlew
      - name: Saving current directory
        uses: alehechka/upload-tartifact@v2
        with:
          name: ci-setup
          path: .
  build:
    name: Build
    if: needs.setup.result == 'success'
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        exclude:
          - os: ${{ (github.event_name != 'pull_request' || github.repository != 'projet-gl2/Hashimiste') && 'macos-latest' || 'none' }}
          - os: ${{ github.event_name != 'pull_request' && 'windows-latest' || 'none' }}
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    needs: setup
    outputs:
        LINUX_ERROR: ${{ steps.build-export-unix.outputs.Linux_ERROR }}
        LINUX_REASON: ${{ steps.build-export-unix.outputs.Linux_REASON }}
        MACOS_ERROR: ${{ steps.build-export-unix.outputs.macOS_ERROR }}
        MACOS_REASON: ${{ steps.build-export-unix.outputs.macOS_REASON }}
        WINDOWS_ERROR: ${{ steps.build-export-windows.outputs.Windows_ERROR }}
        WINDOWS_REASON: ${{ steps.build-export-windows.outputs.Windows_REASON }}
    steps:
      - name: Restore current directory
        uses: alehechka/download-tartifact@v2
        with:
          name: ci-setup
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 16
          cache: gradle
      - run: env
      - name: Execute Gradle build on Unix
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        id: build-export-unix
        run: |
          set +e
          (./gradlew build 2>&1) | tee gradle.log
          exit=$PIPESTATUS[0]
          if [ $exit -ne 0 ]; then
            echo "${RUNNER_OS}_ERROR=true" >> "$GITHUB_OUTPUT"
            {
              echo '${RUNNER_OS}_REASON<<EOF'
              cat gradle.log
              echo EOF
            } >> "$GITHUB_OUTPUT"
          fi
          exit $exit
      - name: Execute Gradle build on Windows
        if: matrix.os == 'windows-latest'
        id: build-export-windows
        run: |
          $ErrorActionPreference = "Continue"
          ./gradlew build 2>&1 | Tee-Object -FilePath gradle.log
          if ($LASTEXITCODE -ne 0) {
            Add-Content -Path $env:GITHUB_OUTPUT -Value "Windows_ERROR=true"
            $gradleLogContent = Get-Content -Path gradle.log
            Add-Content -Path $env:GITHUB_OUTPUT -Value "Windows_REASON<<EOF"
            Add-Content -Path $env:GITHUB_OUTPUT -Value $gradleLogContent
            Add-Content -Path $env:GITHUB_OUTPUT -Value "EOF"
          }
        shell: pwsh


  test:
    name: Test
    if: needs.build.result == 'success'
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Restore current directory
        uses: alehechka/download-tartifact@v2
        with:
          name: ci-setup
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 16
          cache: gradle
      - name: Execute Gradle test
        run: ./gradlew test
  doclint:
    name: Doclint
    if: needs.setup.result == 'success'
    runs-on: ubuntu-latest
    needs: setup
    outputs:
      ERROR: ${{ steps.doclint-summary.outputs.ERROR }}
      REASON: ${{ steps.doclint-summary.outputs.REASON }}
    steps:
      - name: Restore current directory
        uses: alehechka/download-tartifact@v2
        with:
          name: ci-setup
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 16
          cache: gradle
      - name: Execute Gradle javadoc
        run: javadoc -Xdoclint:all -sourcepath src/main/java -subpackages fr -d doc/ >
          doclint.log 2> doclint.err || true
      - run: cat doclint.log
        if: always()
      - run: cat doclint.err
        if: always()
      - name: Check for doclint errors
        id: doclint-errors
        run: |
          if grep -q "error:" doclint.err; then
            echo "ERROR=true" >> "$GITHUB_OUTPUT"
          fi
      - name: Check for doclint warnings
        id: doclint-warnings
        run: |
          if grep -q "warning:" doclint.err; then
            echo "ERROR=true" >> "$GITHUB_OUTPUT"
          fi
      - name: Comment on PR
        if: steps.doclint-errors.outputs.ERROR == 'true' ||
          steps.doclint-warnings.outputs.ERROR == 'true'
        uses: actions/github-script@v7
        id: doclint-summary
        with:
          script: |
            console.log('DocLint found errors or warnings, parsing log...');

            const fs = require('fs');

            const doclintLog = fs.readFileSync('doclint.err', 'utf8');

            const errors = doclintLog.split('\n').filter(line => line.includes('error:') || line.includes('warning:'));

            const regex = /(.*\.java):(\d+): (error|warning): (.*)/;

            let comments = [];

            for (const error of errors) {
              console.log(`DocLint not parsed: ${error}`);
              const match = error.match(regex);
              if (match) {
                const file = match[1];
                const line = match[2];
                const type = match[3];
                const message = match[4];
                const fileFs = fs.readFileSync(file, 'utf8');
                console.log(`[${type}] ${message} at ${file}:${line}`);
                const srcLineBefore = fileFs.split('\n')[line - 2];
                const srcLine = fileFs.split('\n')[line - 1];
                console.log(`Src line before: ${srcLineBefore}`);
                console.log(`Src line       : ${srcLine}`);
                if (srcLineBefore.includes('@SuppressWarnings("all")') || srcLineBefore.includes('@SuppressWarnings("doclint")')
                  || srcLine.includes('@SuppressWarnings("all")') || srcLine.includes('@SuppressWarnings("doclint")')) {
                    console.log(`[${type}] ${message} at ${file}:${line} is suppressed, skipping...`);
                    continue;
                }
                comments.push({
                  path: file,
                  line: parseInt(line),
                  body: `[${type}] ${message.replace(/(@\w+)/g, '`$1`')}`
                });
                if (type == 'error') {
                  core.error({
                    file: file,
                    line: line,
                    title: message
                  });
                } else {
                  core.warning({
                    file: file,
                    line: line,
                    title: message
                  });
                }
              }
            }

            if (context.payload.pull_request) {
              github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number,
                event: 'REQUEST_CHANGES',
                body: 'DocLint found errors or warnings',
                comments: comments
              });
            }

            core.setOutput('ERROR', 'true');

            core.setOutput('REASON', comments.map(comment => `${comment.path}:${comment.line} - ${comment.body}`).join('\0'));
  gendoc:
    name: Generate documentation
    if: needs.doclint.result == 'success' && github.event_name == 'pull_request' && needs.build.outputs.LINUX_ERROR != 'true'
    runs-on: ubuntu-latest
    needs: [doclint, build]
    steps:
      - name: Restore current directory
        uses: alehechka/download-tartifact@v2
        with:
          name: ci-setup
      - name: Execute and Deploy Gradle javadoc
        uses: MathieuSoysal/Javadoc-publisher.yml@v2.4.0
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          javadoc-branch: javadoc
          java-version: 16
          target-folder: doc
          project: gradle
  dirlint:
    name: Directory lint
    if: needs.setup.result == 'success'
    runs-on: ubuntu-latest
    needs: setup
    outputs:
      SRC_FAILED: ${{ steps.dircheck.outputs.SRC_FAILED }}
      SRC_FILES: ${{ steps.dircheck.outputs.SRC_FILES }}
      SRC_FR_FAILED: ${{ steps.dircheck.outputs.SRC_FR_FAILED }}
      SRC_FR_FILES: ${{ steps.dircheck.outputs.SRC_FR_FILES }}
    steps:
      - name: Restore current directory
        uses: alehechka/download-tartifact@v2
        with:
          name: ci-setup
      - name: Check for package structure
        id: dircheck
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            const path = require('path');


            if (fs.existsSync('src/main/java')) {
              const files = fs.readdirSync('src/main/java').filter(file => path.extname(file) === '.java').map(file => `src/main/java/${file}`);
              if (files.length > 0) {
                process.env.SRC_FAILED = 'true';
                process.env.SRC_FILES = files.join('\n');
                fs.appendFileSync(process.env.GITHUB_STEP_SUMMARY, `${files.join('\n')}\n`);
                core.setOutput('SRC_FAILED', 'true');
                core.setOutput('SRC_FILES', files.join('\n'));
                for (const file of files) {
                  core.error({
                    file: file,
                    title: 'File in root package'
                  });
                }
              } else {
                core.setOutput('SRC_FAILED', 'false');
              }
            }

            if (fs.existsSync('src/main/java/fr')) {
              const files = fs.readdirSync('src/main/java/fr').filter(file => path.extname(file) === '.java').map(file => `src/main/java/fr/${file}`);
              if (files.length > 0) {
                process.env.SRC_FR_FAILED = 'true';
                process.env.SRC_FR_FILES = files.join('\n');
                fs.appendFileSync(process.env.GITHUB_STEP_SUMMARY, `${files.join('\n')}\n`);
                core.setOutput('SRC_FR_FAILED', 'true');
                core.setOutput('SRC_FR_FILES', files.join('\n'));
                for (const file of files) {
                  core.error({
                    file: file,
                    title: 'File in fr package'
                  });
                }
              } else {
                core.setOutput('SRC_FR_FAILED', 'false');
              }
            }
  prReview:
    name: Approve or deny PR
    if: github.event_name == 'pull_request' && always()
    runs-on: ubuntu-latest
    needs:
      - doclint
      - dirlint
      - build
    steps:
      - name: Restore current directory
        uses: alehechka/download-tartifact@v2
        with:
          name: ci-setup
      - name: Deny PR
        if: needs.doclint.outputs.ERROR == 'true' || needs.dirlint.outputs.SRC_FAILED ==
          'true' || needs.dirlint.outputs.SRC_FR_FAILED == 'true' || needs.build.outputs.LINUX_ERROR == 'true'
            || needs.build.outputs.MACOS_ERROR == 'true' || needs.build.outputs.WINDOWS_ERROR == 'true'
        uses: actions/github-script@v7
        env:
          DOCLINT_ERROR: ${{needs.doclint.outputs.ERROR}}
          DOCLINT_REASON: ${{needs.doclint.outputs.REASON}}
          DIRLINT_SRC_FAILED: ${{needs.dirlint.outputs.SRC_FAILED}}
          DIRLINT_SRC_FILES: ${{needs.dirlint.outputs.SRC_FILES}}
          DIRLINT_SRC_FR_FAILED: ${{needs.dirlint.outputs.SRC_FR_FAILED}}
          DIRLINT_SRC_FR_FILES: ${{needs.dirlint.outputs.SRC_FR_FILES}}
          LINUX_GRADLE_ERROR: ${{needs.build.outputs.LINUX_ERROR}}
          LINUX_GRADLE_REASON: ${{needs.build.outputs.LINUX_REASON}}
          MACOS_GRADLE_ERROR: ${{needs.build.outputs.MACOS_ERROR}}
          MACOS_GRADLE_REASON: ${{needs.build.outputs.MACOS_REASON}}
          WINDOWS_GRADLE_ERROR: ${{needs.build.outputs.WINDOWS_ERROR}}
          WINDOWS_GRADLE_REASON: ${{needs.build.outputs.WINDOWS_REASON}}
        with:
          script: |
            console.log(process.env.DOCLINT_ERROR);
            console.log(process.env.DOCLINT_REASON);
            console.log(process.env.DIRLINT_SRC_FAILED);
            console.log(process.env.DIRLINT_SRC_FILES);
            console.log(process.env.DIRLINT_SRC_FR_FAILED);
            console.log(process.env.DIRLINT_SRC_FR_FILES);
            console.log(process.env.LINUX_GRADLE_ERROR);
            console.log(process.env.LINUX_GRADLE_REASON);
            console.log(process.env.MACOS_GRADLE_ERROR);
            console.log(process.env.MACOS_GRADLE_REASON);
            console.log(process.env.WINDOWS_GRADLE_ERROR);
            console.log(process.env.WINDOWS_GRADLE_REASON);
            console.log(process.env);
            
            let body = 'There are errors in the code, please fix them:'
            if (process.env.DOCLINT_ERROR == 'true') {
              body += `\n<details><summary>There are errors in the documentation</summary>\n<p>`
              let issues = process.env.DOCLINT_REASON.split('\0');
              for (const issue of issues) {
                  const [file, line, message] = issue.split(':');
                  body += `\n${file}:${line} - ${message}`;
              }
              body += `\n</p></details>`
              console.log(process.env.DOCLINT_ERROR);
              console.log(process.env.DOCLINT_REASON);
              console.log(body);
            }
            if (process.env.DIRLINT_SRC_FAILED == 'true') {
              body += `\n<details><summary>There are files in the root package, please move them to a package</summary>\n<p>${process.env.DIRLINT_SRC_FILES}</p></details>`
              console.log(process.env.DIRLINT_SRC_FAILED);
              console.log(process.env.DIRLINT_SRC_FILES);
              console.log(body);
            }
            if (`${{needs.dirlint.outputs.SRC_FR_FAILED}}` == 'true') {
              body += `\n<details><summary>There are files in the fr package, please move them to a package</summary>\n<p>${process.env.DIRLINT_SRC_FR_FILES}</p></details>`
              console.log(process.env.DIRLINT_SRC_FR_FAILED);
              console.log(process.env.DIRLINT_SRC_FR_FILES);
              console.log(body);
            }
            if (process.env.LINUX_GRADLE_ERROR == 'true') {
              body += `\n<details><summary>There are errors in the Linux build</summary>\n`+'```'+`\n${process.env.LINUX_GRADLE_REASON}`+'```</details>'
              console.log(process.env.LINUX_GRADLE_ERROR);
              console.log(process.env.LINUX_GRADLE_REASON);
              console.log(body);
            }
            if (process.env.MACOS_GRADLE_ERROR == 'true') {
              body += `\n<details><summary>There are errors in the MacOS build</summary>\n`+'```'+`\n${process.env.MACOS_GRADLE_REASON}\n`+'```</details>'
              console.log(process.env.MACOS_GRADLE_ERROR);
              console.log(process.env.MACOS_GRADLE_REASON);
              console.log(body);
            }
            if (process.env.WINDOWS_GRADLE_ERROR == 'true') {
              body += `\n<details><summary>There are errors in the Windows build</summary>\n`+'```'+`\n${process.env.WINDOWS_GRADLE_REASON}\n`+'```</details>'
              console.log(process.env.WINDOWS_GRADLE_ERROR);
              console.log(process.env.WINDOWS_GRADLE_REASON);
              console.log(body);
            }
            console.log(body);
            github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
              event: 'REQUEST_CHANGES',
              body: body
            })
      - name: Approve PR
        if: needs.doclint.outputs.ERROR != 'true' && needs.dirlint.outputs.SRC_FAILED !=
          'true' && needs.dirlint.outputs.SRC_FR_FAILED != 'true' && needs.build.outputs.LINUX_ERROR != 'true'
            && needs.build.outputs.MACOS_ERROR != 'true' && needs.build.outputs.WINDOWS_ERROR != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
              event: 'APPROVE'
            });
  finalize:
    name: Finalize
    if: always()
    runs-on: ubuntu-latest
    needs:
      - test
      - gendoc
      - prReview
    steps:
      - name: Remove artifact
        uses: jimschubert/delete-artifacts-action@v1
        with:
          artifact_name: ci-setup
