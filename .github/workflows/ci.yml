name: Continuous Integration
on:
  push:
    branches-ignore:
      - master
  pull_request:
    branches:
      - master

jobs:
  setup:
    name: Setup CI
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 16
          cache: 'gradle'
      - name: Make Gradlew executable
        run: chmod +x gradlew
      - name: Saving current directory
        uses: alehechka/upload-tartifact@v2
        with:
          name: ci-setup
          path: .

  build:
    name: Build
    if: needs.setup.result == 'success'
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        exclude:
          - os: ${{ github.event_name != 'pull_request' && 'macos-latest' || 'none' }}
          - os: ${{ github.event_name != 'pull_request' && 'windows-latest' || 'none' }}
    runs-on: ${{ matrix.os }}
    needs: setup
    steps:
      - name: Restore current directory
        uses: alehechka/download-tartifact@v2
        with:
          name: ci-setup
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 16
          cache: 'gradle'

      - name: Execute Gradle build
        run: ./gradlew build

  test:
    name: Test
    if: needs.build.result == 'success'
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Restore current directory
        uses: alehechka/download-tartifact@v2
        with:
          name: ci-setup
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 16
          cache: 'gradle'

      - name: Execute Gradle test
        run: ./gradlew test

  doclint:
    name: Doclint
    if: needs.setup.result == 'success'
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Restore current directory
        uses: alehechka/download-tartifact@v2
        with:
          name: ci-setup
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 16
          cache: 'gradle'

      - name: Execute Gradle javadoc
        run: javadoc -Xdoclint:all -sourcepath src/main/java -subpackages fr -d doc/ > doclint.log 2> doclint.err || true
      - run: cat doclint.log
        if: always()
      - run: cat doclint.err
        if: always()


      - name: Check for doclint errors
        id: doclint-errors
        run: |
          if grep -q "error:" doclint.err; then
            echo "::set-output name=error::true"
          fi
      - name: Check for doclint warnings
        id: doclint-warnings
        run: |
          if grep -q "warning:" doclint.err; then
            echo "::set-output name=warning::true"
          fi


      - name: Comment on PR
        if: steps.doclint-errors.outputs.error == 'true' || steps.doclint-warnings.outputs.warning == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            console.log('DocLint found errors or warnings, parsing log...');
            const fs = require('fs');
            const doclintLog = fs.readFileSync('doclint.err', 'utf8');
            const errors = doclintLog.split('\n').filter(line => line.includes('error:') || line.includes('warning:'));
            const regex = /(.*\.java):(\d+): (error|warning): (.*)/;
            let comments = [];
            for (const error of errors) {
              console.log(`DocLint not parsed: ${error}`);
              const match = error.match(regex);
              if (match) {
                const file = match[1];
                const line = match[2];
                const type = match[3];
                const message = match[4];
                const fileFs = fs.readFileSync(file, 'utf8');
                console.log(`[${type}] ${message} at ${file}:${line}`);
                const srcLineBefore = fileFs.split('\n')[line - 2];
                const srcLine = fileFs.split('\n')[line - 1];
                console.log(`Src line before: ${srcLineBefore}`);
                console.log(`Src line       : ${srcLine}`);
                if (srcLineBefore.includes('@SuppressWarnings("all")') || srcLineBefore.includes('@SuppressWarnings("doclint")')
                  || srcLine.includes('@SuppressWarnings("all")') || srcLine.includes('@SuppressWarnings("doclint")')) {
                    console.log(`[${type}] ${message} at ${file}:${line} is suppressed, skipping...`);
                    continue;
                }
                comments.push({
                  path: file,
                  line: parseInt(line),
                  body: `[${type}] ${message.replace(/(@\w+)/g, '`$1`')}`
                });
              }
            }
            if (context.payload.pull_request) {
              github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number,
                event: 'REQUEST_CHANGES',
                body: 'DocLint found errors or warnings',
                comments: comments
              });
            }
            fs.writeFileSync(process.env.GITHUB_STEP_SUMMARY, comments.map(comment => `* ${comment.path}:${comment.line} - ${comment.body}`).join('\n'));

  gendoc:
    name: Generate documentation
    if: needs.doclint.result == 'success' && github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: doclint
    steps:
      - name: Restore current directory
        uses: alehechka/download-tartifact@v2
        with:
          name: ci-setup
      - name: Execute and Deploy Gradle javadoc
        uses: MathieuSoysal/Javadoc-publisher.yml@v2.4.0
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          javadoc-branch: javadoc
          java-version: 16
          target-folder: doc
          project: gradle

  dirlint:
    name: Directory lint
    if: needs.setup.result == 'success'
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Restore current directory
        uses: alehechka/download-tartifact@v2
        with:
          name: ci-setup
      - name: Check for package structure
        run: |
          failed=false
          if [ -e src/main/java/*.java ]; then
            failed=true
            echo $(ls src/main/java/*.java) > $GITHUB_STEP_SUMMARY
          fi
          if [ -e src/test/java/fr/*.java ]; then
            failed=true
            echo $(ls src/test/java/fr/*.java) > $GITHUB_STEP_SUMMARY
          fi
          if failed; then
            echo "::set-output name=error::true"
          fi

  prReview:
    name: Approve or deny PR
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: [ doclint, dirlint ]
    steps:
      - name: Restore current directory
        uses: alehechka/download-tartifact@v2
        with:
          name: ci-setup
      - name: Check for errors
        id: check
        run: |
          if [ -e doclint.err ] || [ -e doclint.log ]; then
            echo "::set-output name=error::true"
          fi
      - name: Deny PR
        if: steps.check.outputs.error == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
              event: 'REQUEST_CHANGES',
              body: 'There are errors in the code, please fix them'
            });
      - name: Approve PR
        if: steps.check.outputs.error != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
              event: 'APPROVE'
            });

  finalize:
    # Remove artifact
    name: Finalize
    if: always()
    runs-on: ubuntu-latest
    needs: [ test, gendoc, prReview ]
    steps:
      - name: Remove artifact
        uses: jimschubert/delete-artifacts-action@v1
        with:
          artifact_name: ci-setup
